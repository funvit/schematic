// Code generated by schematic, DO NOT EDIT.
//
// Schema file: github.com/funvit/schematic/example/schema_with_validators/schema/account.go

package model

import (
	"errors"
	schemagen "github.com/funvit/schematic"
	"github.com/funvit/schematic/example/schema_with_validators/schema"
	"github.com/funvit/schematic/field"
	"github.com/funvit/schematic/pkg/scope_error"
	"github.com/google/uuid"
	"time"
)

// region init

var (
	_ = errors.New("dummy")

	accountModelFields       map[string]*field.Descriptor       // stores model fields
	accountModelFieldsErrors map[string]*scope_error.ScopeError // stores model fields errors
)

func init() {
	// special code.

	m := schema.Account{}

	accountModelFields = make(map[string]*field.Descriptor, len(m.Fields()))
	for _, v := range m.Fields() {
		accountModelFields[v.Descriptor().Name] = v.Descriptor()
	}

	accountModelFieldsErrors = make(map[string]*scope_error.ScopeError, len(m.Fields()))
	accountModelFieldsErrors["login"] = ErrAccountModelFieldLoginInvalidValue
	accountModelFieldsErrors["name"] = ErrAccountModelFieldNameInvalidValue
	accountModelFieldsErrors["rev"] = ErrAccountModelFieldRevInvalidValue
	accountModelFieldsErrors["some_external_uuid"] = ErrAccountModelFieldSomeExternalUuidInvalidValue
	accountModelFieldsErrors["created_at"] = ErrAccountModelFieldCreatedAtInvalidValue
}

// endregion

// region Validator for field: Login

// Error: Account model field Login invalid value.
var ErrAccountModelFieldLoginInvalidValue = scope_error.New(
	"Account model field Login invalid value")

// ValidateAccountModelFieldLogin validates model field Login value.
//
// Raises ErrAccountModelFieldValidationError with cause
// ErrAccountModelFieldLoginInvalidValue.
func ValidateAccountModelFieldLogin(val string) error {

	for _, v := range accountModelFields["login"].Validators {
		err := v.Apply.(func(string) error)(val)
		if err != nil {
			return schemagen.ErrModelFieldValidationError.WithCause(
				ErrAccountModelFieldLoginInvalidValue.WithCause(err))
		}
	}

	return nil
}

// endregion

// region Validator for field: Name

// Error: Account model field Name invalid value.
var ErrAccountModelFieldNameInvalidValue = scope_error.New(
	"Account model field Name invalid value")

// Error: Account model field name validator: must have len greater than 3.
var ErrAccountModelFieldNameMustHaveLenGreaterThan3 = errors.New(
	"must have len greater than 3") // name generated by user provided error text

// ValidateAccountModelFieldName validates model field Name value.
//
// Raises ErrAccountModelFieldValidationError with cause
// ErrAccountModelFieldNameInvalidValue.
func ValidateAccountModelFieldName(val string) error {

	for _, v := range accountModelFields["name"].Validators {
		err := v.Apply.(func(string) error)(val)
		if err != nil {
			return schemagen.ErrModelFieldValidationError.WithCause(
				ErrAccountModelFieldNameInvalidValue.WithCause(err))
		}
	}

	return nil
}

// endregion

// region Validator for field: Rev

// Error: Account model field Rev invalid value.
var ErrAccountModelFieldRevInvalidValue = scope_error.New(
	"Account model field Rev invalid value")

// ValidateAccountModelFieldRev validates model field Rev value.
//
// Raises ErrAccountModelFieldValidationError with cause
// ErrAccountModelFieldRevInvalidValue.
func ValidateAccountModelFieldRev(val uuid.UUID) error {

	for _, v := range accountModelFields["rev"].Validators {
		err := v.Apply.(func(uuid.UUID) error)(val)
		if err != nil {
			return schemagen.ErrModelFieldValidationError.WithCause(
				ErrAccountModelFieldRevInvalidValue.WithCause(err))
		}
	}

	return nil
}

// endregion

// region Validator for field: SomeExternalUuid

// Error: Account model field SomeExternalUuid invalid value.
var ErrAccountModelFieldSomeExternalUuidInvalidValue = scope_error.New(
	"Account model field SomeExternalUuid invalid value")

// ValidateAccountModelFieldSomeExternalUuid validates model field SomeExternalUuid value.
//
// Raises ErrAccountModelFieldValidationError with cause
// ErrAccountModelFieldSomeExternalUuidInvalidValue.
func ValidateAccountModelFieldSomeExternalUuid(val uuid.UUID) error {

	for _, v := range accountModelFields["some_external_uuid"].Validators {
		err := v.Apply.(func(uuid.UUID) error)(val)
		if err != nil {
			return schemagen.ErrModelFieldValidationError.WithCause(
				ErrAccountModelFieldSomeExternalUuidInvalidValue.WithCause(err))
		}
	}

	return nil
}

// endregion

// region Validator for field: CreatedAt

// Error: Account model field CreatedAt invalid value.
var ErrAccountModelFieldCreatedAtInvalidValue = scope_error.New(
	"Account model field CreatedAt invalid value")

// ValidateAccountModelFieldCreatedAt validates model field CreatedAt value.
//
// Raises ErrAccountModelFieldValidationError with cause
// ErrAccountModelFieldCreatedAtInvalidValue.
func ValidateAccountModelFieldCreatedAt(val time.Time) error {

	for _, v := range accountModelFields["created_at"].Validators {
		err := v.Apply.(func(time.Time) error)(val)
		if err != nil {
			return schemagen.ErrModelFieldValidationError.WithCause(
				ErrAccountModelFieldCreatedAtInvalidValue.WithCause(err))
		}
	}

	return nil
}

// endregion

// region model Account validator

// Validate validates model by validators specified in schema.
//
// Returns nil if no validators are defined.
func (m *Account) Validate() error {
	return schemagen.ValidateModel(m, accountModelFields, accountModelFieldsErrors)
}

// endregion
