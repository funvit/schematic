// Code generated by schematic, DO NOT EDIT.
//
// Schema file: {{.SchemaFile}}

package {{.PackageName}}

{{ $modelName := Title (SnakeToCamel .Name) }}

{{ $uuid := 0 }}
{{- range $idx, $f := .Fields }}
	{{ if eq $f.Type.String "uuid.UUID" }}{{ if $f.Validators }}{{ $uuid = 1}}{{- end}}{{- end}}
{{- end}}

{{ $time := 0 }}
{{- range $idx, $f := .Fields }}
	{{ if eq $f.Type.String "time.Time" }}{{ if $f.Validators }}{{ $time = 1}}{{- end}}{{- end}}
{{- end}}

import (
	{{ if $uuid}}"github.com/google/uuid"{{end}}
	{{ if $time}}"time"{{end}}
	"errors"
	"github.com/funvit/schematic/field"
	schemagen "github.com/funvit/schematic"
	"github.com/funvit/schematic/pkg/scope_error"
	"{{ .SchemaImport }}"
)

// region init

var (
	_ = errors.New("dummy")

	{{Lower .Name}}ModelFields map[string]*field.Descriptor // stores model fields
	{{Lower .Name}}ModelFieldsErrors map[string]*scope_error.ScopeError // stores model fields errors
)

func init() {
	// special code.

	m := {{.SchemaPackage}}.{{$modelName}}{}

	{{Lower .Name}}ModelFields = make(map[string]*field.Descriptor, len(m.Fields()))
	for _, v := range m.Fields() {
		{{Lower .Name}}ModelFields[v.Descriptor().Name] = v.Descriptor()
	}

	{{Lower .Name}}ModelFieldsErrors = make(map[string]*scope_error.ScopeError, len(m.Fields()))
	{{- range $n, $f := .Fields }}
	{{- if $f.Validators }}
	{{Lower $modelName}}ModelFieldsErrors["{{$f.Name}}"] = Err{{ $modelName }}ModelField{{Title (SnakeToCamel $f.Name)}}InvalidValue
	{{- end }}
	{{- end }}
}

// endregion

{{- range $n, $f := .Fields }}
{{- if len $f.Validators }}

// region Validator for field: {{SchemaFieldToModel $f}}

// Error: {{$modelName}} model field {{SchemaFieldToModel $f}} invalid value.
var Err{{$modelName}}ModelField{{Title (SchemaFieldToModel $f)}}InvalidValue = scope_error.New(
	"{{ $modelName}} model field {{ SchemaFieldToModel $f}} invalid value")

{{- range $idx, $validator := $f.Validators }}
{{- if $validator.ExpectedError }}

// Error: {{$modelName}} model field {{SnakeToCamel $f.Name}} validator: {{ $validator.ExpectedError }}.
var Err{{$modelName}}ModelField{{Title (SchemaFieldToModel $f)}}{{ ErrorStringToName $validator.ExpectedError }} = errors.New(
	"{{ $validator.ExpectedError }}") // name generated by user provided error text
{{- end }}
{{- end }}

// Validate{{$modelName}}ModelField{{Title (SchemaFieldToModel $f)}} validates model field {{SchemaFieldToModel $f}} value.
//
// Raises Err{{$modelName}}ModelFieldValidationError with cause
// Err{{$modelName}}ModelField{{SchemaFieldToModel $f}}InvalidValue.
func Validate{{$modelName}}ModelField{{Title (SchemaFieldToModel $f)}}(val {{$f.Type.String}}) error {

	for _, v := range {{ Lower $modelName }}ModelFields["{{$f.Name}}"].Validators {
		err := v.Apply.(func({{$f.Type.String}}) error)(val)
		if err != nil {
			return schemagen.ErrModelFieldValidationError.WithCause(
				Err{{$modelName}}ModelField{{Title (SchemaFieldToModel $f)}}InvalidValue.WithCause(err))
		}
	}
	
	return nil
}

// endregion

{{- end }}
{{- end }}

// region model {{$modelName}} validator

// Validate validates model by validators specified in schema.
//
// Returns nil if no validators are defined.
func (m *{{$modelName}})Validate() error {
	return schemagen.ValidateModel(m, {{Lower .Name}}ModelFields, {{Lower .Name}}ModelFieldsErrors)
}

// endregion

